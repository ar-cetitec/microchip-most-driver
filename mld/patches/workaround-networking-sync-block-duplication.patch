workaround: networking: sync block duplication

In the case where the DIM macro transfers at the same time an MEP data
to the MediaLB and a synchronous stream to MediaLB or EHC, the blocks of
the synchronous stream in a size of a half of the synchronous DBR memory
are sporadically duplicated on corresponding side of the synchronous
transfer (MediaLB or EHC).

The duplication of the synchronous blocks can be eliminated by an
application if sizes of all MEP messages are equal to the size of the
configured asynchronous DBR buffer that is the buffer size of the
asynchronous channel configured using the sysfs.

This patch lets the networking AIM to manipulate the PML of the MEP and
the buffer size of the MBO to implement the described workaround.

Application note:

To compensate the transfer rate degradation caused by this patch
an application may try to use smaller asynchronous buffers for the DIM2
HDM used to transfer MEP over the MediaLB.  In this case the MTU must be
decreased too.  The optimal MTU and the buffer size depend on the
application's use cases and must be found out by the system integrator.

Below is the relation between the MTU and the smallest buffer size
needed to support given MTU:

<min buffer size> = 8 [MEP header] + 14 [MAC header] + <MTU size>

For example the buffer size 1522 is big enough for the common used MTU
value 1500 and the buffer size 522 is big enough for the MTU value 500.

The MTU must be the same for all interfaces of the same ethernet
broadcast domain.

For the MTU manipulation see the "mtu" parameter of the "ifconfig" or
"ip link".

Signed-off-by: Andrey Shvetsov <andrey.shvetsov@k2l.de>
diff --git a/drivers/staging/most/aim-network/networking.c b/drivers/staging/most/aim-network/networking.c
index 4659a64..e422e92 100644
--- a/drivers/staging/most/aim-network/networking.c
+++ b/drivers/staging/most/aim-network/networking.c
@@ -140,6 +140,9 @@ static int skb_to_mep(const struct sk_buff *skb, struct mbo *mbo)
 		return -EINVAL;
 	}
 
+	memset(buff + mep_len, 0, mbo->buffer_length - mep_len);
+	mep_len = mbo->buffer_length;
+
 	*buff++ = HB(mep_len - 2);
 	*buff++ = LB(mep_len - 2);
 
